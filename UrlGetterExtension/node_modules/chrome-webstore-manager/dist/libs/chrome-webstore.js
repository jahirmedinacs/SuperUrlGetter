"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var request = require('request-promise');

module.exports =
/*#__PURE__*/
function () {
  function ChromeWebStore(cid, cs, redirectUrl) {
    _classCallCheck(this, ChromeWebStore);

    this.cid = cid;
    this.cs = cs;
    this.redirectUrl = redirectUrl || 'urn:ietf:wg:oauth:2.0:oob';
  }

  _createClass(ChromeWebStore, [{
    key: "getCodeUrl",
    value: function getCodeUrl(redirectUrl, state) {
      state = state || '';
      state = encodeURIComponent(state);
      return 'https://accounts.google.com/o/oauth2/auth?response_type=code&scope=https://www.googleapis.com/auth/chromewebstore&client_id=' + this.cid + '&state' + state + '&redirect_uri=' + (redirectUrl || this.redirectUrl);
    }
  }, {
    key: "getAccessToken",
    value: function getAccessToken(code, redirectUrl) {
      return request.post('https://accounts.google.com/o/oauth2/token').form({
        client_id: this.cid,
        client_secret: this.cs,
        code: code,
        grant_type: 'authorization_code',
        redirect_uri: redirectUrl || this.redirectUrl
      });
    }
  }, {
    key: "insertItem",
    value: function insertItem(token, fileBin) {
      return request.post({
        uri: 'https://www.googleapis.com/upload/chromewebstore/v1.1/items',
        headers: {
          Authorization: 'Bearer ' + token,
          'x-goog-api-version': 2
        },
        body: fileBin
      });
    }
  }, {
    key: "getItem",
    value: function getItem(token, itemId) {
      var projection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'DRAFT';
      return request.get({
        uri: 'https://www.googleapis.com//chromewebstore/v1.1/items/' + itemId + '?projection=' + projection,
        headers: {
          Authorization: 'Bearer ' + token,
          'x-goog-api-version': 2
        }
      });
    }
  }, {
    key: "updateItem",
    value: function updateItem(token, fileBin, itemId) {
      return request({
        method: 'PUT',
        uri: 'https://www.googleapis.com/upload/chromewebstore/v1.1/items/' + itemId,
        headers: {
          Authorization: 'Bearer ' + token,
          'x-goog-api-version': 2
        },
        body: fileBin,
        timeout: 120 * 1000
      });
    }
  }, {
    key: "publishItem",
    value: function publishItem(token, itemId) {
      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
      return request.post({
        uri: 'https://www.googleapis.com//chromewebstore/v1.1/items/' + itemId + '/publish?publishTarget=' + target,
        headers: {
          Authorization: 'Bearer ' + token,
          'x-goog-api-version': 2
        }
      });
    }
  }, {
    key: "getRefreshToken",
    value: function getRefreshToken(refreshToken) {
      return request.post('https://www.googleapis.com/oauth2/v3/token', {
        form: {
          client_id: this.cid,
          client_secret: this.cs,
          grant_type: 'refresh_token',
          refresh_token: refreshToken
        }
      });
    }
  }]);

  return ChromeWebStore;
}();